//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ae2d6f2c-b953-41d5-ad53-d4ce8613b4fe"",
            ""actions"": [
                {
                    ""name"": ""PlayerOne_DirectionKeys"",
                    ""type"": ""Button"",
                    ""id"": ""246153fd-569b-4f0d-924a-9184b0d3a684"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerOne_PowerInput"",
                    ""type"": ""Button"",
                    ""id"": ""eeedba51-7060-4b21-ad70-347f7f4ce8a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerTwo_DirectionKeys"",
                    ""type"": ""Button"",
                    ""id"": ""699a72af-c3ec-45cd-b6fe-baa2c457a676"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerTwo_PowerInput"",
                    ""type"": ""Button"",
                    ""id"": ""5e96b90a-4b31-4e0e-90d6-bff3ecd1d55c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""833f8c07-3144-4350-8e60-cec797886fef"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerOne_DirectionKeys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bbf74f7f-c134-48cd-9150-5a6bb42dd68f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerOne_DirectionKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""557d09be-c82a-4aab-a467-4a7230f2ed91"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerOne_DirectionKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""f8668bc3-42d4-45e7-a096-2f4a25f5fa7b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerTwo_DirectionKeys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a66a83bd-e388-4d92-802b-817723e58022"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerTwo_DirectionKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fd54a006-3a3f-4dda-aca8-7e74b7e489ee"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerTwo_DirectionKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8a50384c-3506-410f-a425-f229fed5a91e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerOne_PowerInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe9e62d3-ca0b-47c7-954d-d641b88b5892"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerTwo_PowerInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""218ad9fc-57ce-4281-9dd6-0e3845090361"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""97877024-0e99-4235-9876-637c8213f6a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""c5a281d4-1551-40c2-9132-da0e671bdf91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e956eac-9e17-488c-ae3b-204b231284d0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7a4ac51-8309-46f1-9785-ae6c7bbbca05"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PlayerOne_DirectionKeys = m_Player.FindAction("PlayerOne_DirectionKeys", throwIfNotFound: true);
        m_Player_PlayerOne_PowerInput = m_Player.FindAction("PlayerOne_PowerInput", throwIfNotFound: true);
        m_Player_PlayerTwo_DirectionKeys = m_Player.FindAction("PlayerTwo_DirectionKeys", throwIfNotFound: true);
        m_Player_PlayerTwo_PowerInput = m_Player.FindAction("PlayerTwo_PowerInput", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Escape = m_UI.FindAction("Escape", throwIfNotFound: true);
        m_UI_Reset = m_UI.FindAction("Reset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_PlayerOne_DirectionKeys;
    private readonly InputAction m_Player_PlayerOne_PowerInput;
    private readonly InputAction m_Player_PlayerTwo_DirectionKeys;
    private readonly InputAction m_Player_PlayerTwo_PowerInput;
    public struct PlayerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerOne_DirectionKeys => m_Wrapper.m_Player_PlayerOne_DirectionKeys;
        public InputAction @PlayerOne_PowerInput => m_Wrapper.m_Player_PlayerOne_PowerInput;
        public InputAction @PlayerTwo_DirectionKeys => m_Wrapper.m_Player_PlayerTwo_DirectionKeys;
        public InputAction @PlayerTwo_PowerInput => m_Wrapper.m_Player_PlayerTwo_PowerInput;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @PlayerOne_DirectionKeys.started += instance.OnPlayerOne_DirectionKeys;
            @PlayerOne_DirectionKeys.performed += instance.OnPlayerOne_DirectionKeys;
            @PlayerOne_DirectionKeys.canceled += instance.OnPlayerOne_DirectionKeys;
            @PlayerOne_PowerInput.started += instance.OnPlayerOne_PowerInput;
            @PlayerOne_PowerInput.performed += instance.OnPlayerOne_PowerInput;
            @PlayerOne_PowerInput.canceled += instance.OnPlayerOne_PowerInput;
            @PlayerTwo_DirectionKeys.started += instance.OnPlayerTwo_DirectionKeys;
            @PlayerTwo_DirectionKeys.performed += instance.OnPlayerTwo_DirectionKeys;
            @PlayerTwo_DirectionKeys.canceled += instance.OnPlayerTwo_DirectionKeys;
            @PlayerTwo_PowerInput.started += instance.OnPlayerTwo_PowerInput;
            @PlayerTwo_PowerInput.performed += instance.OnPlayerTwo_PowerInput;
            @PlayerTwo_PowerInput.canceled += instance.OnPlayerTwo_PowerInput;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @PlayerOne_DirectionKeys.started -= instance.OnPlayerOne_DirectionKeys;
            @PlayerOne_DirectionKeys.performed -= instance.OnPlayerOne_DirectionKeys;
            @PlayerOne_DirectionKeys.canceled -= instance.OnPlayerOne_DirectionKeys;
            @PlayerOne_PowerInput.started -= instance.OnPlayerOne_PowerInput;
            @PlayerOne_PowerInput.performed -= instance.OnPlayerOne_PowerInput;
            @PlayerOne_PowerInput.canceled -= instance.OnPlayerOne_PowerInput;
            @PlayerTwo_DirectionKeys.started -= instance.OnPlayerTwo_DirectionKeys;
            @PlayerTwo_DirectionKeys.performed -= instance.OnPlayerTwo_DirectionKeys;
            @PlayerTwo_DirectionKeys.canceled -= instance.OnPlayerTwo_DirectionKeys;
            @PlayerTwo_PowerInput.started -= instance.OnPlayerTwo_PowerInput;
            @PlayerTwo_PowerInput.performed -= instance.OnPlayerTwo_PowerInput;
            @PlayerTwo_PowerInput.canceled -= instance.OnPlayerTwo_PowerInput;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Escape;
    private readonly InputAction m_UI_Reset;
    public struct UIActions
    {
        private @PlayerInputs m_Wrapper;
        public UIActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_UI_Escape;
        public InputAction @Reset => m_Wrapper.m_UI_Reset;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerActions
    {
        void OnPlayerOne_DirectionKeys(InputAction.CallbackContext context);
        void OnPlayerOne_PowerInput(InputAction.CallbackContext context);
        void OnPlayerTwo_DirectionKeys(InputAction.CallbackContext context);
        void OnPlayerTwo_PowerInput(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnEscape(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
}
